{"ast":null,"code":"var _jsxFileName = \"/Users/jaehyuk_2/Desktop/ds_study/AI_chat_supporter_react_nodejs/nodeapp/src/reactapp/src/public/JSX/ChatPage/MessageContainer.jsx\",\n  _s = $RefreshSig$();\n// import '../../CSS/MessageContainer.css';\n// import Message from './Message';\n\n// export default function MessageContainer({messages}) {\n\n//     console.log(\"MessageContainer props messages ::\", messages);\n\n//     return (\n//         <div className=\"MessageContainer\">\n//             {messages.map((message, index) => (\n//                 <Message\n//                     key={index}\n//                     {...message}\n//                 />\n//             ))}\n//         </div>\n//     )\n// }\n\nimport React, { useState } from 'react';\nimport '../../CSS/MessageContainer.css';\nimport Message from './Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MessageContainer({\n  messages\n}) {\n  _s();\n  console.log(\"MessageContainer props messages ::\", messages);\n  // 숨겨진 메시지의 인덱스를 추적하기 위한 상태\n  const [hiddenMessages, setHiddenMessages] = useState(new Set());\n  // 컨텍스트 메뉴의 위치와 가시성을 제어하기 위한 상태\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    messageIndex: null\n  });\n  // 우클릭 시 컨텍스트 메뉴를 표시하는 핸들러\n  const handleContextMenu = (event, index) => {\n    event.preventDefault(); // 기본 우클릭 메뉴를 방지합니다.\n    // 클릭한 위치의 좌표와 메시지 인덱스를 설정하여 컨텍스트 메뉴를 표시합니다.\n    setContextMenu({\n      visible: true,\n      x: event.clientX,\n      y: event.clientY,\n      messageIndex: index\n    });\n  };\n  // 컨텍스트 메뉴에서 숨기기 버튼을 클릭했을 때의 핸들러\n  const handleHideMessage = () => {\n    if (contextMenu.messageIndex !== null) {\n      setHiddenMessages(prevHiddenMessages => {\n        const updatedHiddenMessages = new Set(prevHiddenMessages);\n        updatedHiddenMessages.add(contextMenu.messageIndex);\n        return updatedHiddenMessages;\n      });\n    }\n    // 컨텍스트 메뉴를 숨깁니다.\n    setContextMenu({\n      ...contextMenu,\n      visible: false\n    });\n  };\n  // 컨텍스트 메뉴를 닫는 핸들러\n  const handleClickOutside = () => {\n    if (contextMenu.visible) {\n      setContextMenu({\n        ...contextMenu,\n        visible: false\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MessageContainer\",\n    onClick: handleClickOutside,\n    children: [messages.map((message, index) => !hiddenMessages.has(index) &&\n    /*#__PURE__*/\n    // 숨겨진 메시지는 렌더링하지 않습니다.\n    _jsxDEV(\"div\", {\n      onContextMenu: event => handleContextMenu(event, index) // 우클릭 시 메시지를 숨깁니다.\n      ,\n      children: /*#__PURE__*/_jsxDEV(Message, {\n        ...message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }, this)), contextMenu.visible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"context-menu\",\n      style: {\n        top: `${contextMenu.y}px`,\n        left: `${contextMenu.x}px`,\n        position: 'absolute'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleHideMessage,\n        children: \"\\uC0AD\\uC81C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(MessageContainer, \"MndirFoygvmPJ3fJCekHla9d5aw=\");\n_c = MessageContainer;\nvar _c;\n$RefreshReg$(_c, \"MessageContainer\");","map":{"version":3,"names":["React","useState","Message","jsxDEV","_jsxDEV","MessageContainer","messages","_s","console","log","hiddenMessages","setHiddenMessages","Set","contextMenu","setContextMenu","visible","x","y","messageIndex","handleContextMenu","event","index","preventDefault","clientX","clientY","handleHideMessage","prevHiddenMessages","updatedHiddenMessages","add","handleClickOutside","className","onClick","children","map","message","has","onContextMenu","fileName","_jsxFileName","lineNumber","columnNumber","style","top","left","position","_c","$RefreshReg$"],"sources":["/Users/jaehyuk_2/Desktop/ds_study/AI_chat_supporter_react_nodejs/nodeapp/src/reactapp/src/public/JSX/ChatPage/MessageContainer.jsx"],"sourcesContent":["// import '../../CSS/MessageContainer.css';\n// import Message from './Message';\n\n\n// export default function MessageContainer({messages}) {\n\n//     console.log(\"MessageContainer props messages ::\", messages);\n\n//     return (\n//         <div className=\"MessageContainer\">\n//             {messages.map((message, index) => (\n//                 <Message\n//                     key={index}\n//                     {...message}\n//                 />\n//             ))}\n//         </div>\n//     )\n// }\n\nimport React, { useState } from 'react';\nimport '../../CSS/MessageContainer.css';\nimport Message from './Message';\nexport default function MessageContainer({ messages }) {\n    console.log(\"MessageContainer props messages ::\", messages);\n    // 숨겨진 메시지의 인덱스를 추적하기 위한 상태\n    const [hiddenMessages, setHiddenMessages] = useState(new Set());\n    // 컨텍스트 메뉴의 위치와 가시성을 제어하기 위한 상태\n    const [contextMenu, setContextMenu] = useState({\n        visible: false,\n        x: 0,\n        y: 0,\n        messageIndex: null,\n    });\n    // 우클릭 시 컨텍스트 메뉴를 표시하는 핸들러\n    const handleContextMenu = (event, index) => {\n        event.preventDefault(); // 기본 우클릭 메뉴를 방지합니다.\n        // 클릭한 위치의 좌표와 메시지 인덱스를 설정하여 컨텍스트 메뉴를 표시합니다.\n        setContextMenu({\n            visible: true,\n            x: event.clientX,\n            y: event.clientY,\n            messageIndex: index,\n        });\n    };\n    // 컨텍스트 메뉴에서 숨기기 버튼을 클릭했을 때의 핸들러\n    const handleHideMessage = () => {\n        if (contextMenu.messageIndex !== null) {\n            setHiddenMessages(prevHiddenMessages => {\n                const updatedHiddenMessages = new Set(prevHiddenMessages);\n                updatedHiddenMessages.add(contextMenu.messageIndex);\n                return updatedHiddenMessages;\n            });\n        }\n        // 컨텍스트 메뉴를 숨깁니다.\n        setContextMenu({ ...contextMenu, visible: false });\n    };\n    // 컨텍스트 메뉴를 닫는 핸들러\n    const handleClickOutside = () => {\n        if (contextMenu.visible) {\n            setContextMenu({ ...contextMenu, visible: false });\n        }\n    };\n    return (\n        <div className=\"MessageContainer\" onClick={handleClickOutside}>\n            {messages.map((message, index) => (\n                !hiddenMessages.has(index) && ( // 숨겨진 메시지는 렌더링하지 않습니다.\n                    <div\n                        key={index}\n                        onContextMenu={(event) => handleContextMenu(event, index)} // 우클릭 시 메시지를 숨깁니다.\n                    >\n                        <Message\n                            key={index}\n                            {...message}\n                        />\n                    </div>\n                )\n            ))}\n            {contextMenu.visible && (\n                <div\n                    className=\"context-menu\"\n                    style={{ top: `${contextMenu.y}px`, left: `${contextMenu.x}px`, position: 'absolute' }}\n                >\n                    <button onClick={handleHideMessage}>삭제</button>\n                </div>\n            )}\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}